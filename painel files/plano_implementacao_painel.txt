# Plano de Implementação do Painel

## Fase 1: Configuração do Ambiente Base
### 1.1 Setup Inicial
```bash
# Criar estrutura do projeto
npx create-next-app@latest organizador-tdah --typescript --tailwind --eslint

# Instalar dependências principais
npm install @mui/material @emotion/react @emotion/styled
npm install @tanstack/react-query axios
npm install react-beautiful-dnd framer-motion
npm install react-toastify
npm install jose jsonwebtoken
npm install mongoose
```

### 1.2 Estrutura de Pastas
```
src/
├── components/
│   ├── common/
│   │   ├── Loading/
│   │   ├── Error/
│   │   ├── Toast/
│   │   └── Card/
│   ├── layout/
│   │   ├── Header/
│   │   ├── Sidebar/
│   │   └── Footer/
│   └── features/
│       ├── auth/
│       ├── tasks/
│       └── settings/
├── hooks/
├── contexts/
├── services/
├── utils/
├── styles/
└── types/
```

## Fase 2: Componentes Base
### 2.1 Componentes Comuns
1. Loading
   - Skeleton loading
   - Spinner
   - Progress bar

2. Error
   - Error boundary
   - Error messages
   - Fallback UI

3. Toast
   - Success/Error/Warning/Info
   - Customização por tipo
   - Duração configurável

4. Card
   - Layout base
   - Animações
   - Variantes

### 2.2 Layout
1. Header
   - Navigation
   - User menu
   - Theme toggle

2. Sidebar
   - Menu items
   - Collapse/Expand
   - Active states

3. Footer
   - Links
   - Copyright
   - Version info

## Fase 3: Autenticação e Segurança
### 3.1 Backend
```typescript
// Middleware de autenticação
import { NextApiRequest, NextApiResponse } from 'next';
import jwt from 'jsonwebtoken';

export async function authMiddleware(
  req: NextApiRequest,
  res: NextApiResponse,
  next: () => void
) {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) throw new Error('No token provided');
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET!);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Unauthorized' });
  }
}
```

### 3.2 Frontend
```typescript
// Hook de autenticação
import { useContext, createContext } from 'react';

interface AuthContextType {
  user: User | null;
  login: (credentials: Credentials) => Promise<void>;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextType>(null!);

export function useAuth() {
  return useContext(AuthContext);
}
```

## Fase 4: Funcionalidades Core
### 4.1 Gestão de Tarefas
1. CRUD Operations
2. Drag & Drop
3. Filtros e Ordenação
4. Tags e Categorias

### 4.2 Sistema de Prioridades
1. Visualização Kanban
2. Lista de Prioridades
3. Reordenação
4. Status Updates

## Fase 5: PWA e Offline
### 5.1 Service Worker
```typescript
// next.config.js
const withPWA = require('next-pwa')({
  dest: 'public',
  register: true,
  skipWaiting: true,
  disable: process.env.NODE_ENV === 'development'
});

module.exports = withPWA({
  // outras configurações
});
```

### 5.2 Manifest
```json
{
  "name": "Organizador TDAH",
  "short_name": "OrgTDAH",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#FFFFFF",
  "theme_color": "#4CAF50",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
```

## Fase 6: Banco de Dados
### 6.1 Conexão
```typescript
// lib/mongodb.ts
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI!;

if (!MONGODB_URI) {
  throw new Error('Please define the MONGODB_URI environment variable');
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    cached.promise = mongoose.connect(MONGODB_URI);
  }
  cached.conn = await cached.promise;
  return cached.conn;
}

export default dbConnect;
```

### 6.2 Models
```typescript
// models/Task.ts
import mongoose from 'mongoose';

const TaskSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: String,
  priority: {
    type: String,
    enum: ['high', 'medium', 'low'],
    default: 'medium'
  },
  status: {
    type: String,
    enum: ['pending', 'in_progress', 'done'],
    default: 'pending'
  },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  dueDate: Date,
  tags: [String],
  createdAt: {
    type: Date,
    default: Date.now
  }
});

export default mongoose.models.Task || mongoose.model('Task', TaskSchema);
```

## Fase 7: Testes
### 7.1 Configuração
```typescript
// jest.config.js
module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  moduleNameMapper: {
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/hooks/(.*)$': '<rootDir>/src/hooks/$1'
  },
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{ts,tsx}'
  ],
  coverageThreshold: {
    global: {
      branches: 70,
      functions: 70,
      lines: 70,
      statements: 70
    }
  }
};
```

### 7.2 Exemplos de Testes
```typescript
// components/common/Loading/Loading.test.tsx
import { render, screen } from '@testing-library/react';
import Loading from './Loading';

describe('Loading', () => {
  it('renders spinner when type is spinner', () => {
    render(<Loading type="spinner" />);
    expect(screen.getByTestId('spinner')).toBeInTheDocument();
  });

  it('renders skeleton when type is skeleton', () => {
    render(<Loading type="skeleton" />);
    expect(screen.getByTestId('skeleton')).toBeInTheDocument();
  });
});
```

## Fase 8: Deploy
### 8.1 Configuração Vercel
```json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "env": {
    "MONGODB_URI": "@mongodb_uri",
    "JWT_SECRET": "@jwt_secret",
    "GOOGLE_CLIENT_ID": "@google_client_id"
  }
}
```

### 8.2 GitHub Actions
```yaml
name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      - run: npm ci
      - run: npm test
      - run: npm run build
```

## Cronograma de Implementação

### Semana 1
- Setup do ambiente
- Componentes base
- Estrutura inicial

### Semana 2
- Autenticação
- Banco de dados
- API routes básicas

### Semana 3
- Funcionalidades core
- PWA
- Testes iniciais

### Semana 4
- Integrações
- Otimizações
- Deploy

## Métricas de Sucesso
1. Cobertura de testes > 70%
2. Lighthouse score > 90
3. Tempo de resposta < 300ms
4. PWA funcional
5. CI/CD automatizado

## Próximos Passos
1. Confirmar stack tecnológica
2. Iniciar setup do ambiente
3. Desenvolver componentes base
4. Implementar autenticação 