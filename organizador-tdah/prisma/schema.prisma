// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks     Task[]
  goals     Goal[]
  routines  Routine[]
  health    HealthRecord[]
  finances  FinanceRecord[]
  exercises ExerciseRecord[]
  meals     MealRecord[]
  studies   StudyRecord[]

  @@map("users")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    Priority @default(MEDIUM)
  status      Status   @default(PENDING)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  deadline    DateTime?
  progress    Int      @default(0)
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("goals")
}

model Routine {
  id          String   @id @default(cuid())
  title       String
  description String?
  frequency   String
  timeOfDay   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("routines")
}

model HealthRecord {
  id          String   @id @default(cuid())
  date        DateTime
  mood        Int
  sleep       Int
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("health_records")
}

model FinanceRecord {
  id          String    @id @default(cuid())
  date        DateTime
  type        String
  amount      Float
  category    String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@map("finance_records")
}

model ExerciseRecord {
  id          String   @id @default(cuid())
  date        DateTime
  type        String
  duration    Int
  intensity   String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("exercise_records")
}

model MealRecord {
  id          String   @id @default(cuid())
  date        DateTime
  type        String
  description String
  calories    Int?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("meal_records")
}

model StudyRecord {
  id          String   @id @default(cuid())
  date        DateTime
  subject     String
  duration    Int
  progress    Int
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("study_records")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
