// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  tasks     Task[]
  goals     Goal[]
  routines  Routine[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  health    HealthRecord[]
  finances  FinanceRecord[]
  exercises ExerciseRecord[]
  meals     MealRecord[]
  studies   StudyRecord[]

  @@map("users")
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    String    @default("medium")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  category    String?
  tags        String[]
  subTasks    SubTask[]

  @@map("tasks")
}

model SubTask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  completed Boolean  @default(false)
  taskId    String   @db.ObjectId
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sub_tasks")
}

model Goal {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("goals")
}

model Routine {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  frequency   String    @default("daily")
  time        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("routines")
}

model HealthRecord {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  type        String
  value       String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("health_records")
}

model FinanceRecord {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  type        String
  amount      Float
  category    String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("finance_records")
}

model ExerciseRecord {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  type        String
  duration    Int
  intensity   String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("exercise_records")
}

model MealRecord {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  type        String
  description String
  calories    Int?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("meal_records")
}

model StudyRecord {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  subject     String
  duration    Int
  topic       String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  @@map("study_records")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
